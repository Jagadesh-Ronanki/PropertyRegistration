{"ast":null,"code":"var _jsxFileName = \"/home/jagadeshronanki/projects/PropertyRegistration/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [correctNetwork, setCorrectNetwork] = useState(false);\n  const connectWallet = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n      if (!ethereum) {\n        console.log(\"No metamask detected\");\n      }\n      let chainId = await ethereum.request({\n        method: \"eth_chainId\"\n      });\n      console.log(\"Connected to chain:\", chainId);\n      const hardhatChainId = \"0x7a69\";\n      if (chainId !== hardhatChainId) {\n        alert(\"Please connect to hardhat local network\");\n        return;\n      } else {\n        setCorrectNetwork(true);\n      }\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\"\n      });\n      console.log(\"Connected to account:\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(\"Error connecting to wallet\", error);\n    }\n  };\n  useEffect(() => {\n    connectWallet();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: currentAccount === \"\" ? /*#__PURE__*/_jsxDEV(\"center\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button\",\n        onClick: connectWallet,\n        children: \"Connect Wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this) : correctNetwork ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Correct Network\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please connect to the Hardhat Testnet and reload the page.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"sCc4BogJP9gooVoge+4YyhjeAWg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","ethers","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","currentAccount","setCurrentAccount","correctNetwork","setCorrectNetwork","connectWallet","ethereum","window","console","log","chainId","request","method","hardhatChainId","alert","accounts","error","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jagadeshronanki/projects/PropertyRegistration/frontend/src/App.js"],"sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react';\nimport {ethers} from 'ethers';\n\nfunction App() {\n  const [currentAccount, setCurrentAccount] = useState(\"\")\n  const [correctNetwork, setCorrectNetwork] = useState(false)\n\n  const connectWallet = async() => {\n    try {\n      const { ethereum } = window\n      if (!ethereum) {\n        console.log(\"No metamask detected\");\n      }\n\n      let chainId = await ethereum.request({method: \"eth_chainId\"})\n      console.log(\"Connected to chain:\", chainId)\n\n      const hardhatChainId = \"0x7a69\"\n      if (chainId !== hardhatChainId) {\n        alert(\"Please connect to hardhat local network\")\n        return;\n      } else {\n        setCorrectNetwork(true)\n      }\n\n      const accounts = await ethereum.request({\n        method: \"eth_accounts\",\n      })\n      console.log(\"Connected to account:\", accounts[0])\n      setCurrentAccount(accounts[0])\n    } catch (error) {\n      console.log(\"Error connecting to wallet\", error)\n    }\n  };\n\n  useEffect(()=> {\n    connectWallet();\n  }, [])\n\n  return (\n    <>\n    {currentAccount === \"\" ? (\n      <center>\n        <button className=\"button\" onClick={connectWallet}>Connect Wallet</button>\n      </center>\n    ) : correctNetwork ? (\n      <h2>Correct Network</h2>\n    ) : (\n      <p>Please connect to the Hardhat Testnet and reload the page.</p>\n    )}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAAQC,MAAM,QAAO,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE9B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE3D,MAAMa,aAAa,GAAG,MAAAA,CAAA,KAAW;IAC/B,IAAI;MACF,MAAM;QAAEC;MAAS,CAAC,GAAGC,MAAM;MAC3B,IAAI,CAACD,QAAQ,EAAE;QACbE,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;MACrC;MAEA,IAAIC,OAAO,GAAG,MAAMJ,QAAQ,CAACK,OAAO,CAAC;QAACC,MAAM,EAAE;MAAa,CAAC,CAAC;MAC7DJ,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEC,OAAO,CAAC;MAE3C,MAAMG,cAAc,GAAG,QAAQ;MAC/B,IAAIH,OAAO,KAAKG,cAAc,EAAE;QAC9BC,KAAK,CAAC,yCAAyC,CAAC;QAChD;MACF,CAAC,MAAM;QACLV,iBAAiB,CAAC,IAAI,CAAC;MACzB;MAEA,MAAMW,QAAQ,GAAG,MAAMT,QAAQ,CAACK,OAAO,CAAC;QACtCC,MAAM,EAAE;MACV,CAAC,CAAC;MACFJ,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEM,QAAQ,CAAC,CAAC,CAAC,CAAC;MACjDb,iBAAiB,CAACa,QAAQ,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdR,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEO,KAAK,CAAC;IAClD;EACF,CAAC;EAEDvB,SAAS,CAAC,MAAK;IACbY,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA,CAAAE,SAAA;IAAAmB,QAAA,EACChB,cAAc,KAAK,EAAE,gBACpBL,OAAA;MAAAqB,QAAA,eACErB,OAAA;QAAQsB,SAAS,EAAC,QAAQ;QAACC,OAAO,EAAEd,aAAc;QAAAY,QAAA,EAAC;MAAc;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpE,CAAC,GACPpB,cAAc,gBAChBP,OAAA;MAAAqB,QAAA,EAAI;IAAe;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,gBAExB3B,OAAA;MAAAqB,QAAA,EAAG;IAA0D;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG;EACjE,gBACC,CAAC;AAEP;AAACvB,EAAA,CAjDQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AAmDZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}